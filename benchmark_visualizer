#!/usr/bin/env python3
#
# MIT License
#
# Copyright (c) 2018 David Tellenbach <david.tellenbach@tellnotes.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import json
import matplotlib as plt
plt.use('Agg')
import matplotlib.pyplot as pyplot

def convertTimeUnit(value, src, dest):
  if src == dest:
    return value
  if src == "ns":
    if dest == "us":
      return value / 1000
    if dest == "ms":
      return value / 1000000
  elif src == "us":
    if dest == "ns":
      return value * 1000
    if dest == "ms":
      return value / 1000
  elif src == "ms":
    if dest == "ns":
      return value * 1000000
    if dest == "us":
      return value * 10000


def parseJSON(file, xValue, yValue="real_time", timeUnit="ns"):
  # Open file and extract json
  with open(file) as fd:
    data = json.load(fd)

  ret = []
  for bench in data["benchmarks"]:
    # Convert time units if necessary
    if bench["time_unit"] != timeUnit:
      bench[yValue] = convertTimeUnit(bench[yValue], bench["time_unit"],
                                      timeUnit)
    tmp = (bench["benchmark_visualizer_group"], bench[xValue], bench[yValue], timeUnit)
    ret.append(tmp)

  return ret

def plot(data, xLabel, yLabel, plotTitle, pathToOut, groupDesc, tickBegin=0,
         tickEnd=-1, tickStep="auto"):
  benchmarkDict = dict()

  for bench in data:
    # If no list for this benchmark (group) exist, we create one
    if bench[0] not in benchmarkDict:
      benchmarkDict.update({bench[0]: ([], [])})

    # Append x value if necessary
    if bench[1] not in benchmarkDict[bench[0]][0]:
      benchmarkDict[bench[0]][0].append(bench[1])

    # Append y value
    benchmarkDict[bench[0]][1].append(bench[2])
    
  for key, value in benchmarkDict.items():
    # Add plotting data
    pyplot.plot(value[0], value[1], marker='o', label=groupDesc[int(key)])

  pyplot.title(plotTitle)
  pyplot.ylabel(yLabel)
  pyplot.xlabel(xLabel)
  pyplot.legend()
  pyplot.grid()

  if tickEnd == -1:
    for key, val in benchmarkDict.items():
      if max(val[0]) > tickEnd:
        tickEnd = max(val[0])

  if tickStep != "auto":
    pyplot.xticks(range(int(tickBegin), int(tickEnd)+1, int(tickStep)))

  pyplot.savefig(pathToOut, bbox_inches='tight')

def main():
  parser = argparse.ArgumentParser(description = "Visualize Google Benchmark.")

  parser.add_argument("--file", "-f",
                      metavar = "FILE", 
                      help = "Path to JSON file with benchmark results",
                      dest = "pathToFile",
                      required = True)
  parser.add_argument("--time_unit", "-t",
                      choices = ["ns", "us", "ms"],
                      help = "Time unit for measured durations",
                      dest = "timeUnit",
                      default = "ns")
  parser.add_argument("--title",
                      metavar = "TITLE",
                      help = "Diagram title",
                      dest = "title",
                      default = "Benchmark Results")
  parser.add_argument("--y_label",
                      metavar = "Y_LABEL",
                      dest = "yLabel",
                      help = "Lable on the y axis")
  parser.add_argument("--x_label",
                      metavar = "X_LABEL",
                      dest = "xLabel",
                      help = "Label on the x axis")
  parser.add_argument("--x_value", "-x",
                      metavar = "X_VALUE",
                      dest = "xValue",
                      help = "Name of the counter that stores the x value",
                      required = True)
  parser.add_argument("--output_file", "-o",
                      metavar = "FILE",
                      help = "Path to file where the image of the diagram will "
                             "be stored.",
                      dest = "pathToOut",
                      required = True)
  parser.add_argument("--tick_begin",
                      metavar = "VALUE",
                      help = "Set the begin of the x ticks manually",
                      dest = "tickBegin",
                      default = 0)
  parser.add_argument("--tick_end",
                      metavar = "VALUE",
                      help = "Set the end of the x ticks manually",
                      dest = "tickEnd",
                      default = -1)
  parser.add_argument("--tick_step",
                      metavar = "VALUE",
                      help = "Set the steps of the x ticks manually",
                      dest = "tickStep",
                      default = "auto")
  parser.add_argument("--group_desc", "-g",
                      metavar = "DESC",
                      nargs='*',
                      help = "",
                      dest = "groupDesc",
                      required = True)

  args = parser.parse_args()

  if args.xLabel is None:
    xLabel = args.xValue
  else:
    xLabel = args.xLabel

  if args.yLabel is None:
    yLabel = "Time in {}".format(args.timeUnit)
  else:
    yLabel = args.yLabel

  plot(parseJSON(args.pathToFile, args.xValue, timeUnit = args.timeUnit),
       xLabel, yLabel, args.title, args.pathToOut, args.groupDesc, args.tickBegin,
       args.tickEnd, args.tickStep)

main()

